type RobboGroupHttp {
	id: String!
	lastModified: Timestamp!
	name: String!
	robboUnitId: String!
	students: [StudentHttp!]
}

input NewRobboGroup {
	name: String!
	robboUnitId: String!
}

type RobboGroupHttpList {
	robboGroups: [RobboGroupHttp!]!
	countRows: Int!
}

input UpdateRobboGroup {
	id: String!
	name: String!
	robboUnitId: String!
}

type DeletedRobboGroup {
	robboGroupId: String!
}

union RobboGroupResult = RobboGroupHttp | Error
union RobboGroupsResult = RobboGroupHttpList | Error

extend type Mutation {
	CreateRobboGroup(input: NewRobboGroup!): RobboGroupResult!
	UpdateRobboGroup(input: UpdateRobboGroup!): RobboGroupResult!
	DeleteRobboGroup(robboGroupId: String!): DeletedRobboGroup!
}

extend type Query {
	GetRobboGroupById(id: String!): RobboGroupResult!
	# Ручка для Админов для получения групп на которые назначен Teacher
	GetRobboGroupsByTeacherId(teacherId: String!, page: String!, pageSize: String!): RobboGroupsResult!
	# Ручка для Super Admin для получения групп на которые назначен Unit Admin
	GetRobboGroupsByRobboUnitId(robboUnitId: String!): RobboGroupsResult!
	# Ручка для Super Admin для получения групп к которым имеет доступ Unit Admin
	GetRobboGroupsByUnitAdminId(unitAdminId: String!, page: String!, pageSize: String!): RobboGroupsResult!
	# Ручка для Unit Admin для получения всех групп для Unit Admin
	GetAllRobboGroupsForUnitAdmin(page: String!, pageSize: String!): RobboGroupsResult!
	# Ручка Super Admin для получения всех групп
	GetAllRobboGroups(page: String!, pageSize: String!): RobboGroupsResult!
	# Ручка для Teacher для получения групп на которые он назначен
	GetRobboGroupsByAccessToken(page: String!, pageSize: String!): RobboGroupsResult!
	SearchGroupsByName(name: String!, page: String!, pageSize: String!): RobboGroupsResult!
}