// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_edxApi is a generated GoMock package.
package mock_edxApi

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	edxApi "github.com/skinnykaen/robbo_student_personal_account.git/package/edxApi"
)

// MockEdxApiUseCase is a mock of EdxApiUseCase interface.
type MockEdxApiUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockEdxApiUseCaseMockRecorder
}

// MockEdxApiUseCaseMockRecorder is the mock recorder for MockEdxApiUseCase.
type MockEdxApiUseCaseMockRecorder struct {
	mock *MockEdxApiUseCase
}

// NewMockEdxApiUseCase creates a new mock instance.
func NewMockEdxApiUseCase(ctrl *gomock.Controller) *MockEdxApiUseCase {
	mock := &MockEdxApiUseCase{ctrl: ctrl}
	mock.recorder = &MockEdxApiUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEdxApiUseCase) EXPECT() *MockEdxApiUseCaseMockRecorder {
	return m.recorder
}

// GetAllPublicCourses mocks base method.
func (m *MockEdxApiUseCase) GetAllPublicCourses(pageNumber int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPublicCourses", pageNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPublicCourses indicates an expected call of GetAllPublicCourses.
func (mr *MockEdxApiUseCaseMockRecorder) GetAllPublicCourses(pageNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPublicCourses", reflect.TypeOf((*MockEdxApiUseCase)(nil).GetAllPublicCourses), pageNumber)
}

// GetCourseContent mocks base method.
func (m *MockEdxApiUseCase) GetCourseContent(courseId string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseContent", courseId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseContent indicates an expected call of GetCourseContent.
func (mr *MockEdxApiUseCaseMockRecorder) GetCourseContent(courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseContent", reflect.TypeOf((*MockEdxApiUseCase)(nil).GetCourseContent), courseId)
}

// GetCoursesByUser mocks base method.
func (m *MockEdxApiUseCase) GetCoursesByUser() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoursesByUser")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoursesByUser indicates an expected call of GetCoursesByUser.
func (mr *MockEdxApiUseCaseMockRecorder) GetCoursesByUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoursesByUser", reflect.TypeOf((*MockEdxApiUseCase)(nil).GetCoursesByUser))
}

// GetEnrollments mocks base method.
func (m *MockEdxApiUseCase) GetEnrollments(username string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnrollments", username)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnrollments indicates an expected call of GetEnrollments.
func (mr *MockEdxApiUseCaseMockRecorder) GetEnrollments(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrollments", reflect.TypeOf((*MockEdxApiUseCase)(nil).GetEnrollments), username)
}

// GetUser mocks base method.
func (m *MockEdxApiUseCase) GetUser() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockEdxApiUseCaseMockRecorder) GetUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockEdxApiUseCase)(nil).GetUser))
}

// Login mocks base method.
func (m *MockEdxApiUseCase) Login(email, password string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", email, password)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockEdxApiUseCaseMockRecorder) Login(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockEdxApiUseCase)(nil).Login), email, password)
}

// PostEnrollment mocks base method.
func (m *MockEdxApiUseCase) PostEnrollment(message map[string]interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostEnrollment", message)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostEnrollment indicates an expected call of PostEnrollment.
func (mr *MockEdxApiUseCaseMockRecorder) PostEnrollment(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostEnrollment", reflect.TypeOf((*MockEdxApiUseCase)(nil).PostEnrollment), message)
}

// PostRegistration mocks base method.
func (m *MockEdxApiUseCase) PostRegistration(postMessage edxApi.RegistrationForm) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostRegistration", postMessage)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostRegistration indicates an expected call of PostRegistration.
func (mr *MockEdxApiUseCaseMockRecorder) PostRegistration(postMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostRegistration", reflect.TypeOf((*MockEdxApiUseCase)(nil).PostRegistration), postMessage)
}
